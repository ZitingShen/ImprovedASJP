#!/usr/bin/env python
# -*- coding: utf-8 -*- 

from phonemes_to_features import convertToFeatures, readInPhonologicalData, Word
from compare_words import WordComparer

def generate_word_dictionary(words_bag, meaning_list='data/40-item Swadesh List.txt'):
	"""
	Generate a dictionary of dictionary of words from a bag of Word-typed words.
	The keys will be the language and the meanings.
	:param words_bag: a bag of all words generated by convertToFeatures(readInPhonologicalData())
					  from phonemes_to_features.py
	:param meaning_list: the basic vocabulary used to compute the linguistic distance
	:return: a dictionary of dictionary of words from a bag of Word-typed words, whose 
			 keys are the language and the meanings
	"""
	words_dict = {}
	for word in words_bag:
		if word.language not in words_dict:
			words_dict[word.language] = {}
		words_dict[word.language][word.meaning] = word
	return words_dict

class LanguageComparer():
	def __init__(self, language1, language2, words_dict, meaning_list):
		"""
		Compute the linguistic distance and geographical distance of language1 and
		language2 using the specified meaning_list.
		:param language1: the name of one of the two languages being compared
		:param language2: the name of the other language being compared
		:param words_dict: a dictionary of dictionary of words from a bag of Word-typed words, 
						   whose keys are the language names and the meanings
		:param meaning_list: the basic vocabulary used to compute the linguistic distance
		"""
		self.language1 = language1
		self.language2 = language2
		self.language1_dict = words_dict[language1]
		self.language2_dict = words_dict[language2]
		self.meaning_list = meaning_list

	def linguistic_distance(self):
		"""
		Compare the two languages word by word for all meanings in the meaning_list.
		:return: the linguistic similarity between the two languages
		"""
		num_words = 0
		total_similarity = 0.0
		for meaning in self.meaning_list:
			word1 = self.language1_dict.get(meaning)
			word2 = self.language2_dict.get(meaning)
			if word1 != None and word2 != None:
				num_words += 1
				word_comparer = WordComparer(word1, word2)
				self_comparer1 = WordComparer(word1, word1)
				self_comparer2 = WordComparer(word2, word2)
				total_similarity += 1 - word_comparer.generate_matrix()*2.0/\
									(self_comparer1.generate_matrix()+self_comparer2.generate_matrix())
		return total_similarity/num_words


def compare_languages(meaning_input='data/40-item Swadesh List.txt'):
	"""
	Compare each pair of languages that has 100+ words in phonological forms.
	:param meaning_list: the basic vocabulary used to compute the linguistic distance
	"""
	with open(meaning_input) as input:
		meaning_list = [meaning for line in input for meaning in line.split()]
	words_bag = convertToFeatures(readInPhonologicalData())
	words_dict = generate_word_dictionary(words_bag)

	language_comparer = LanguageComparer('Icelandic', 'English', words_dict, meaning_list)
	print language_comparer.linguistic_distance()

compare_languages()