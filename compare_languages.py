#!/usr/bin/env python
# -*- coding: utf-8 -*- 

from phonemes_to_features import convertToFeatures, readInPhonologicalData, Word

def generate_word_dictionary(words_bag, meaning_list='data/40-item Swadesh List.txt'):
	"""
	Generate a dictionary of dictionary of words from a bag of Word-typed words.
	The keys will be the language and the meanings.
	:param words_bag: a bag of all words generated by convertToFeatures(readInPhonologicalData())
					  from phonemes_to_features.py
	:param meaning_list: the basic vocabulary used to compute the linguistic distance
	:return: a dictionary of dictionary of words from a bag of Word-typed words, whose 
			 keys are the language and the meanings
	"""
	words_dict = {}
	for word in words_bag:
		if word.language not in words_dict:
			words_dict[word.language] = {}
		words_dict[word.language][word.meaning] = word
	return words_dict

class LanguageComparer():
	def __init__(self, language1, language2, words_dict, meaning_list):
		"""
		Compute the linguistic distance and geographical distance of language1 and
		language2 using the specified meaning_list.
		:param language1: the name of one of the two languages being compared
		:param language2: the name of the other language being compared
		:param words_dict: a dictionary of dictionary of words from a bag of Word-typed words, 
						   whose keys are the language names and the meanings
		:param meaning_list: the basic vocabulary used to compute the linguistic distance
		"""
		self.language1 = language1
		self.language2 = language2
		self.language1_dict = words_dict[language1]
		self.language2_dict = words_dict[language2]
		self.meaning_list = meaning_list

	def compare():
		"""
		Compare the two languages word by word for all meanings in the meaning_list.
		"""


def compare_languages(meaning_list='data/40-item Swadesh List.txt'):
	"""
	Compare each pair of languages that has 100+ words in phonological forms.
	:param meaning_list: the basic vocabulary used to compute the linguistic distance
	"""
	with open(meaning_list) as input:
		self.meaning_list = [meaning for line in input for meaning in line.split()]

generate_word_dictionary(convertToFeatures(readInPhonologicalData()))
#LanguageComparer('English', 'French')